import random
import time
import pickle
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Configurar opciones para evitar detecci√≥n
chrome_options = Options()
chrome_options.add_argument("--disable-blink-features=AutomationControlled")
chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
chrome_options.add_experimental_option("useAutomationExtension", False)

# Ruta a ChromeDriver
service = Service("chromedriver.exe")
driver = webdriver.Chrome(service=service, options=chrome_options)

driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

# Ruta para guardar las cookies
COOKIES_PATH = "cookies.pkl"

def save_cookies(driver, path):
    """Guarda las cookies en un archivo."""
    with open(path, "wb") as file:
        pickle.dump(driver.get_cookies(), file)
    print("‚úÖ Cookies guardadas correctamente.")

def load_cookies(driver, path):
    """Carga las cookies desde un archivo."""
    if os.path.exists(path):
        with open(path, "rb") as file:
            cookies = pickle.load(file)
            for cookie in cookies:
                try:
                    driver.add_cookie(cookie)
                except:
                    print("‚ö†Ô∏è Error al cargar una cookie.")
        print("‚úÖ Cookies cargadas correctamente.")
    else:
        print("‚ùå No se encontraron cookies.")

def click_button_if_present(text):
    """Hace clic en un bot√≥n si est√° presente."""
    try:
        button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.XPATH, f"//button[div[text()='{text}']]"))
        )
        button.click()
        time.sleep(2)
    except:
        print(f"‚ö†Ô∏è Bot√≥n '{text}' no encontrado o no disponible.")

def select_random_dropdown(select_id):
    """Selecciona un valor aleatorio en un men√∫ desplegable."""
    try:
        dropdown = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, select_id))
        )
        dropdown.click()
        time.sleep(1)
        dropdown.send_keys(str(random.randint(1, 28)))  # Simula valores aleatorios
        dropdown.send_keys(Keys.ENTER)
    except:
        print(f"‚ö†Ô∏è Dropdown {select_id} no disponible.")

def answer_random_question():
    """Responde preguntas aleatorias (men√∫s desplegables, opciones de selecci√≥n, etc.)."""
    try:
        elements = driver.find_elements(By.CLASS_NAME, "react-select__input")
        for element in elements:
            element.click()
            time.sleep(1)
            element.send_keys(Keys.ARROW_DOWN)
            element.send_keys(Keys.ENTER)
            time.sleep(1)
    except:
        print("‚ö†Ô∏è No se encontr√≥ una pregunta seleccionable.")

# Abrir la p√°gina de Surveytime
driver.get("https://surveytime.io/profiler")

# Intentar cargar cookies para evitar iniciar sesi√≥n
load_cookies(driver, COOKIES_PATH)
driver.refresh()  # Refrescar la p√°gina para aplicar cookies

# Verificar si el usuario necesita iniciar sesi√≥n
if "Iniciar sesi√≥n" in driver.page_source:
    click_button_if_present("Iniciar sesi√≥n")
    input("üîµ Inicia sesi√≥n manualmente y presiona ENTER para continuar...")  
    save_cookies(driver, COOKIES_PATH)  # Guardar cookies despu√©s del inicio de sesi√≥n

# Continuar con la encuesta
click_button_if_present("//button[div[contains(text(),'Empezar ya')]]")
frames = driver.find_elements(By.TAG_NAME, "iframe")
print(f"üîç Encontrados {len(frames)} iframes.")

for i, frame in enumerate(frames):
    driver.switch_to.frame(frame)
    if "Empezar ya" in driver.page_source:
        print(f"‚úÖ Bot√≥n encontrado dentro del iframe {i}.")
        click_button_if_present("Empezar ya")
        driver.switch_to.default_content()
        break
    driver.switch_to.default_content()
    
def click_button_with_scroll(xpath):
    """Hace scroll hasta el bot√≥n y lo presiona."""
    try:
        button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
        driver.execute_script("arguments[0].scrollIntoView();", button)  # Desplazar hasta el bot√≥n
        time.sleep(1)  # Esperar un poco m√°s
        button.click()
        time.sleep(2)
    except:
        print(f"‚ö†Ô∏è No se pudo hacer clic en el bot√≥n {xpath}")

click_button_with_scroll("//button[div[text()='Empezar ya']]")
def click_add_answers():
    """Hace clic en el bot√≥n 'A√±adir respuestas' si est√° disponible."""
    try:
        button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//button[div[text()='A√±adir respuestas']]"))
        )
        driver.execute_script("arguments[0].scrollIntoView();", button)  # Hacer scroll si est√° tapado
        time.sleep(1)  # Esperar un poco m√°s
        button.click()
        time.sleep(2)
        print("‚úÖ Bot√≥n 'A√±adir respuestas' presionado.")
        
    except:
        print("‚ö†Ô∏è Bot√≥n 'A√±adir respuestas' no encontrado o no disponible.")
        

# Llamar a la funci√≥n despu√©s de hacer clic en 'Empezar ya'
click_add_answers()
def select_random_multiple_choice():
    """Selecciona respuestas aleatorias en preguntas tipo 'multiple choice' usando XPath."""
    try:
        # Encuentra todas las opciones dentro de la pregunta actual usando XPath
        options = driver.find_elements(By.XPATH, "//*[@id='root']/div/div[1]/div/div[1]/div/div[2]/div/div/div")

        if options:
            random_option = random.choice(options)  # Selecciona una opci√≥n al azar
            driver.execute_script("arguments[0].scrollIntoView();", random_option)  # Asegura que sea visible
            time.sleep(1)  # Peque√±a pausa
            random_option.click()  # Hace clic en la opci√≥n
            time.sleep(1)
            print("‚úÖ Opci√≥n seleccionada en pregunta m√∫ltiple choice.")
               # Verificar si aparece el men√∫ desplegable despu√©s de "Empezar ya"
        elif is_element_present(By.XPATH, "//*[@id='root']/div/div[1]/div/div[1]/div/div[2]/div/div/div[1]/div[2]/div"):
            print("üìÇ Men√∫ desplegable detectado, seleccionando una opci√≥n aleatoria...")
            select_random_dropdown("react-select-5-input")  # Ajusta el ID seg√∫n corresponda
        else:
            print("‚ö†Ô∏è No se encontraron opciones en esta pregunta.")

    except Exception as e:
        print(f"‚ö†Ô∏è Error al seleccionar opci√≥n m√∫ltiple choice: {e}")

# Llamar a la funci√≥n despu√©s de 'A√±adir respuestas'
select_random_multiple_choice()
click_button_if_present("siguiente")
time.sleep(3)  # Esperar carga inicial

while True:
    try:
        # Verificar si hay una pregunta de fecha de nacimiento
  # Verificar si aparece el men√∫ desplegable despu√©s de "Empezar ya"
        if is_element_present(By.XPATH, "//*[@id='root']/div/div[1]/div/div[1]/div/div[2]/div/div/div[1]/div[2]/div"):
            print("üìÇ Men√∫ desplegable detectado, seleccionando una opci√≥n aleatoria...")
            select_random_dropdown("react-select-5-input")  # Ajusta el ID seg√∫n corresponda
        
        else:
            while True:
                # Intentar hacer clic en "A√±adir respuestas" si est√° presente
                if click_button_if_present("A√±adir respuestas"):
                    print("‚ûï Se presion√≥ 'A√±adir respuestas'. Seleccionando opciones nuevamente...")
                    time.sleep(2)  # Peque√±a pausa antes de seleccionar opciones
                    select_random_multiple_choice()  # Seleccionar opciones de multiple choice
                else:
                    break  # Si no encuentra el bot√≥n, sale del loop interno

            # Intentar hacer clic en el bot√≥n "Siguiente" si est√° presente
            click_button_if_present("siguiente")

        time.sleep(2)  # Peque√±a pausa antes de la siguiente pregunta

    except Exception as e:
        print(f"üéâ Encuesta finalizada o error inesperado: {e}")
        break


driver.quit()
